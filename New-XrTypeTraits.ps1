# New-XrTypeTraits.ps1
# Copyright © 2025 Visualisierungsinstitut der Universität Stuttgart.
# Licensed under the MIT licence. See LICENCE file for details.

<#
.SYNOPSIS 
Creates xrtl::type_traits from the Khronos Group's XML specification.

.PARAMETER Path
The Path parameter specifies the location of the XML specification.

.PARAMETER Hide
The Hide parameter specifies a list of types to be excluded.

.OUTPUTS
The script returns the declaration for the xrtl::type_traits specialisations
for all structures in the XML specification

.EXAMPLE
.\New-XrTypeTraits.ps1 > .\xrtl\include\xrtl\xr_type_traits.inl
#>

[CmdletBinding()]
param(
    [string] $Path = 'https://raw.githubusercontent.com/KhronosGroup/OpenXR-Docs/refs/heads/main/specification/registry/xr.xml',
    [string[]] $Hide = @('XrCoordinateSpaceCreateInfoML')
    )

if ($Path -imatch 'https?://') {
    [xml] $specification = (Invoke-WebRequest -Uri $Path).Content
} else {
    [xml] $specification = Get-Content $Path
}

$invocation = (Get-Variable MyInvocation -Scope Script).Value

@"
/******************************************************************************\
 THIS FILE WAS GENERATED BY $($invocation.MyCommand.Name) ON $(Get-Date)
\******************************************************************************/
"@

# Determine the global #ifdef guards based on extensions.
$globalProtects = @{ }

$Hide | ForEach-Object {
    $globalProtects[$_] = 'false'
}

$specification.SelectNodes('//extension') | ForEach-Object {
    $guard = $_.protect
    if (-not $guard) {
        $guard = $_.name
    }

    $_.SelectNodes('require/type') | ForEach-Object {
        $type = $_.name
        $globalProtects[$type] = $guard.ToString()
    }
}


# Select all struc types in the specification.
$specification.SelectNodes('//type[@category="struct"]') | ForEach-Object {
    $name = $_.name
    $type = $_.SelectNodes('member[contains(@values, "XR_TYPE_")]/@values')
    if ($type -and $type.value) {
        $beginGuard = $endGuard = @"
"@
        $type = $type.value

        if ($_.protect) {
            $guard = $_.protect
            $beginGuard = @"

#if defined($guard)
"@
            $endGuard = @"
#endif /* defined($guard) */

"@
        }

        if ($globalProtects.ContainsKey($name)) {
            $guard = $globalProtects[$name]
            $beginGuard = @"

#if defined($guard)
"@
            $endGuard = @"
#endif /* defined($guard) */

"@
        }

        @"
$beginGuard
/// <summary>
/// Specialisation for <see cref="$name" />.
/// </summary>
template<>
struct xr_type_traits<$name> : public detail::xrtt_impl<
    $name,
    $($type)> { };
$endGuard
"@
    }
}
